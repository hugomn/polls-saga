{"version":3,"sources":["store/question/types.ts","store/question/actions.ts","components/Question/QuestionCard/template.tsx","components/Question/QuestionCard/index.tsx","components/Question/QuestionList/template.tsx","components/Question/QuestionList/index.ts","components/Question/QuestionDetail/template.tsx","components/Question/QuestionDetail/index.ts","routes.tsx","components/App/index.ts","components/App/template.tsx","service/api.ts","store/question/sagas.ts","store/question/reducers.ts","store/index.ts","index.tsx"],"names":["QuestionsActionTypes","choiceVoteSucceeded","choice","action","QUESTION_CHOICE_VOTE_SUCEEDED","choiceVoteFailed","message","QUESTION_CHOICE_VOTE_FAILED","fetchQuestionSucceeded","question","QUESTION_FETCH_SUCCEEDED","fetchQuestionFailed","QUESTION_FETCH_FAILED","fetchQuestionsSucceeded","questions","QUESTIONS_FETCH_SUCCEEDED","fetchQuestionsFailed","QUESTIONS_FETCH_FAILED","QuestionCard","handleClick","_this","props","showDetail","this","react","Card","fluid","onClick","Content","Header","Meta","Date","published_at","toLocaleString","Description","choices","length","React","connect","dispatch","QUESTION_SHOW_DETAIL","template","QuestionList","getQuestions","Container","as","Grid","stackable","map","Column","computer","tablet","mobile","key","url","Question_QuestionCard","Loader","active","size","inline","style","marginTop","state","items","QUESTIONS_FETCH_REQUESTED","QuestionDetail","handleChoiceClick","selectChoice","handleVoteSubmit","choiceVote","activeQuestion","selectedChoice","renderChoice","selected","console","log","Table","Row","positive","Cell","collapsing","textAlign","Radio","checked","votes","Progress","total","value","precision","indicating","getQuestion","match","params","id","_this2","Divider","hidden","celled","definition","selectable","Body","Footer","fullWidth","HeaderCell","colSpan","Button","floated","labelPosition","icon","primary","disabled","Icon","name","QUESTION_FETCH_REQUESTED","actions","QUESTION_CHOICE_VOTE_REQUESTED","QUESTION_CHOICE_SELECTED","Routes","react_default","a","createElement","Switch","Route","exact","path","component","Component","className","routes_Routes","api","axios","get","concat","postChoice","choiceUrl","post","voteQuestion","fetchQuestion","fetchQuestions","sagas","res","regenerator_default","wrap","_context","prev","next","call","payload","sent","put","data","t0","stop","_marked","_context2","_marked2","_context3","_marked3","_context4","push","_marked4","_context5","all","takeLatest","_marked5","initialState","loading","undefined","errors","getTotalVotes","reduce","updateChoice","newChoice","reducer","arguments","type","Object","objectSpread","rootSaga","fork","questionsSaga","store_marked","history","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","createBrowserHistory","basename","window","initialReduxState","store","createStore","combineReducers","router","connectRouter","questionsReducer","applyMiddleware","routerMiddleware","run","ReactDOM","render","es","esm","components_App","document","getElementById"],"mappings":"iKAYYA,85BCRL,IAIMC,EAAsB,SAACC,GAAD,OAAoBC,iBAAOH,EAAqBI,8BAA+BF,IACrGG,EAAmB,SAACC,GAAD,OAAqBH,iBAAOH,EAAqBO,4BAA6BD,IAGjGE,EAAyB,SAACC,GAAD,OAAwBN,iBAAOH,EAAqBU,yBAA0BD,IACvGE,EAAsB,SAACL,GAAD,OAAqBH,iBAAOH,EAAqBY,sBAAuBN,IAG9FO,EAA0B,SAACC,GAAD,OAA2BX,iBAAOH,EAAqBe,0BAA2BD,IAC5GE,EAAuB,SAACV,GAAD,OAAqBH,iBAAOH,EAAqBiB,uBAAwBX,iDCa9FY,6MApBbC,YAAc,WACZC,EAAKC,MAAMC,WAAWF,EAAKC,MAAMZ,mFAG1B,IACCA,EAAac,KAAKF,MAAlBZ,SACR,OACEe,EAAA,cAACC,EAAA,EAAD,CAAMC,OAAK,EAACC,QAASJ,KAAKJ,aACxBK,EAAA,cAACC,EAAA,EAAKG,QAAN,KACEJ,EAAA,cAACC,EAAA,EAAKI,OAAN,KAAcpB,EAASA,UACvBe,EAAA,cAACC,EAAA,EAAKK,KAAN,KACG,IAAIC,KAAKtB,EAASuB,cAAcC,kBAEnCT,EAAA,cAACC,EAAA,EAAKS,YAAN,KAAmBzB,EAAS0B,QAAQC,OAApC,qBAdiBC,aCGZC,cACb,KAPyB,SAACC,GAC1B,MAAO,CACLjB,WAAY,SAACb,GAAD,OAAwB8B,EFJd,SAAC9B,GAAD,OAAwBN,iBAAOH,EAAqBwC,qBAAsB/B,GEInDa,CAAWb,OAI7C6B,CAGbG,GCmCaC,8LAtCXnB,KAAKF,MAAMsB,gDAGJ,IACC7B,EAAcS,KAAKF,MAAnBP,UACR,OACEU,EAAA,cAACA,EAAA,SAAD,KACEA,EAAA,cAACoB,EAAA,EAAD,KACEpB,EAAA,cAACK,EAAA,EAAD,CAAQgB,GAAG,MAAX,aACArB,EAAA,cAACsB,EAAA,EAAD,CAAMC,WAAS,GACZjC,EAAUsB,OACTtB,EAAUkC,IAAI,SAAAvC,GAAQ,OACpBe,EAAA,cAACsB,EAAA,EAAKG,OAAN,CACEC,SAAU,EACVC,OAAQ,EACRC,OAAQ,GACRC,IAAK5C,EAAS6C,KAEd9B,EAAA,cAAC+B,EAAD,CAAc9C,SAAUA,OAI5Be,EAAA,cAACgC,EAAA,EAAD,CACEC,QAAM,EACNC,KAAK,QACLC,OAAO,WACPC,MAAO,CAAEC,UAAW,UAJtB,wBAxBaxB,aCUZC,cAdS,SAACwB,GACvB,MAAO,CACLhD,UAAWgD,EAAMhD,UAAUiD,OAAS,KAIb,SAACxB,GAC1B,MAAO,CACLI,aAAc,WACZJ,EJAuCpC,iBAAOH,EAAqBgE,+BIK1D1B,CAGbG,yDCiGawB,6MAvFbC,kBAAoB,SAAChE,GACnBkB,EAAKC,MAAM8C,aAAajE,MAG1BkE,iBAAmB,WACjBhD,EAAKC,MAAMgD,WAAWjD,EAAKC,MAAMiD,eAAgBC,mBAGnDC,aAAe,SAACtE,GAAmB,IACzBoE,EAAmBlD,EAAKC,MAAxBiD,eACAC,EAAmBD,EAAnBC,eACFE,EAAWF,GAAkBrE,EAAOoD,MAAQiB,EAAejB,IAEjE,OADAoB,QAAQC,IAAI,4BAA6BJ,GAEvC/C,EAAA,cAACoD,EAAA,EAAMC,IAAP,CACExB,IAAKnD,EAAOoD,IACZ3B,QAAS,kBAAMP,EAAK8C,kBAAkBhE,IACtC4E,SAAUL,GAEVjD,EAAA,cAACoD,EAAA,EAAMG,KAAP,CAAYC,YAAU,EAACC,UAAU,UAC/BzD,EAAA,cAAC0D,EAAA,EAAD,CAAOC,QAASV,KAElBjD,EAAA,cAACoD,EAAA,EAAMG,KAAP,KAAa7E,EAAOA,QACpBsB,EAAA,cAACoD,EAAA,EAAMG,KAAP,KAAa7E,EAAOkF,MAApB,UACA5D,EAAA,cAACoD,EAAA,EAAMG,KAAP,KACEvD,EAAA,cAAC6D,EAAA,EAAD,CACEC,MAAOhB,EAAgBgB,MACvBC,MAAOrF,EAAOkF,MACdI,UAAW,EACXC,YAAU,0FAhClBlE,KAAKF,MAAMqE,YAAYnE,KAAKF,MAAMsE,MAAMC,OAAOC,qCAuCxC,IAAAC,EAAAvE,KACC+C,EAAmB/C,KAAKF,MAAxBiD,eACR,OAAIA,EAEA9C,EAAA,cAACA,EAAA,SAAD,KACEA,EAAA,cAACoB,EAAA,EAAD,KACEpB,EAAA,cAACK,EAAA,EAAD,CAAQgB,GAAG,MAAX,oBACArB,EAAA,cAACK,EAAA,EAAD,CAAQgB,GAAG,MAAX,aAA2ByB,EAAe7D,UAC1Ce,EAAA,cAACuE,EAAA,EAAD,CAASC,QAAM,IACfxE,EAAA,cAACoD,EAAA,EAAD,CAAOqB,QAAM,EAACC,YAAU,EAACC,YAAU,GACjC3E,EAAA,cAACoD,EAAA,EAAMwB,KAAP,KACG9B,EAAenC,QAAQa,IAAI,SAAA9C,GAAM,OAChC4F,EAAKtB,aAAatE,MAItBsB,EAAA,cAACoD,EAAA,EAAMyB,OAAP,CAAcC,WAAS,GACrB9E,EAAA,cAACoD,EAAA,EAAMC,IAAP,KACErD,EAAA,cAACoD,EAAA,EAAM2B,WAAP,MACA/E,EAAA,cAACoD,EAAA,EAAM2B,WAAP,CAAkBC,QAAQ,KACxBhF,EAAA,cAACiF,EAAA,EAAD,CACEC,QAAQ,QACRC,cAAc,OACdC,MAAI,EACJC,SAAO,EACPC,UAAWxC,EAAeC,eAC1B5C,QAASJ,KAAK6C,kBAEd5C,EAAA,cAACuF,EAAA,EAAD,CAAMC,KAAK,QARb,oBAmBdxF,EAAA,cAACgC,EAAA,EAAD,CACEC,QAAM,EACNC,KAAK,QACLC,OAAO,WACPC,MAAO,CAAEC,UAAW,UAJtB,qBAjFuBxB,aCCdC,cArBS,SAACwB,GACvB,MAAO,CACLQ,eAAgBR,EAAMhD,UAAUwD,iBAIT,SAAC/B,GAC1B,MAAO,CACLmD,YAAa,SAACG,GACZtD,ENLgC,SAACsD,GAAD,OAAgB1F,iBAAOH,EAAqBiH,yBAA0B,CAAEpB,OMK/FqB,CAA+BrB,KAE1CxB,WAAY,SAACnE,GACXqC,ENZ6B,SAACrC,GAAD,OAAoBC,iBAAOH,EAAqBmH,+BAAgCjH,GMYpGgH,CAA4BhH,KAEvCiE,aAAc,SAACjE,GACbwE,QAAQC,IAAI,oBAAqBzE,GACjCqC,ENjBwB,SAACrC,GAAD,OAAoBC,iBAAOH,EAAqBoH,yBAA0BlH,GMiBzFgH,CAAuBhH,OAKvBoC,CAGbG,GC1BmB4E,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnF,IACjC4E,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOE,KAAK,iBAAiBC,UAAW5D,aANd6D,aCHrBrF,mLCGX,OACE6E,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACQ,EAAD,cAJUF,uDCDZxE,EAAM,iCAcG2E,GAZH,CACVvC,YAAa,SAASG,GACpB,OAAOqC,IAAMC,IAAN,GAAAC,OAAa9E,EAAb,eAAA8E,OAA8BvC,KAEvClD,aAAc,WACZ,OAAOuF,IAAMC,IAAN,GAAAC,OAAa9E,EAAb,gBAET+E,WAAY,SAASC,GACnB,OAAOJ,IAAMK,KAAN,GAAAH,OAAc9E,GAAd8E,OAAoBE,0BCNdE,gBASAC,gBASAC,gBASApH,gBAIPqH,IA/BH,SAAUH,GAAarI,GAAvB,IAAAyI,EAAA,OAAAC,EAAAtB,EAAAuB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAES,OAFTF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEeC,YAAKjB,GAAII,WAAYlI,EAAOgJ,QAAQ7F,KAFnD,OAGH,OADMsF,EAFHG,EAAAK,KAAAL,EAAAE,KAAA,EAGGI,YAAInC,EAA4B0B,EAAIU,OAHvC,OAAAP,EAAAE,KAAA,gBAKH,OALGF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAAAA,EAAAE,KAAA,GAKGI,YAAInC,EAAA6B,EAAAQ,KALP,yBAAAR,EAAAS,SAAAC,GAAAlI,KAAA,SASA,SAAUkH,GAActI,GAAxB,IAAAyI,EAAA,OAAAC,EAAAtB,EAAAuB,KAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,OAES,OAFTS,EAAAV,KAAA,EAAAU,EAAAT,KAAA,EAEeC,YAAKjB,GAAIvC,YAAavF,EAAOgJ,QAAQtD,IAFpD,OAGH,OADM+C,EAFHc,EAAAN,KAAAM,EAAAT,KAAA,EAGGI,YAAInC,EAA+B0B,EAAIU,OAH1C,OAAAI,EAAAT,KAAA,gBAKH,OALGS,EAAAV,KAAA,EAAAU,EAAAH,GAAAG,EAAA,SAAAA,EAAAT,KAAA,GAKGI,YAAInC,EAAAwC,EAAAH,KALP,yBAAAG,EAAAF,SAAAG,GAAApI,KAAA,SASA,SAAUmH,KAAV,IAAAE,EAAA,OAAAC,EAAAtB,EAAAuB,KAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OAES,OAFTW,EAAAZ,KAAA,EAAAY,EAAAX,KAAA,EAEeC,YAAKjB,GAAItF,cAFxB,OAGH,OADMiG,EAFHgB,EAAAR,KAAAQ,EAAAX,KAAA,EAGGI,YAAInC,EAAgC0B,EAAIU,OAH3C,OAAAM,EAAAX,KAAA,gBAKH,OALGW,EAAAZ,KAAA,EAAAY,EAAAL,GAAAK,EAAA,SAAAA,EAAAX,KAAA,GAKGI,YAAInC,EAAA0C,EAAAL,KALP,yBAAAK,EAAAJ,SAAAK,GAAAtI,KAAA,SASA,SAAUD,GAAWnB,GAArB,OAAA0I,EAAAtB,EAAAuB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OACL,OADKa,EAAAb,KAAA,EACCI,YAAIU,aAAK5J,EAAOgJ,QAAQ7F,MADzB,wBAAAwG,EAAAN,SAAAQ,GAAAzI,MAIP,SAAUoH,KAAV,OAAAE,EAAAtB,EAAAuB,KAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,OACE,OADFgB,EAAAhB,KAAA,EACQiB,YAAI,CACRC,YAAWnK,EAAqBwC,qBAAsBlB,IACtD6I,YAAWnK,EAAqBmH,+BAAgCqB,IAChE2B,YAAWnK,EAAqBiH,yBAA0BwB,IAC1D0B,YAAWnK,EAAqBgE,0BAA2B0E,MAL/D,wBAAAuB,EAAAT,SAAAY,GAAA7I,MASeoH,mBC1CF0B,GAA+B,CAC1CC,SAAS,EACThG,oBAAgBiG,EAChBxG,MAAO,GACPyG,YAAQD,GAGJE,GAAgB,SAAChK,GACrB,OAAOA,EAAS0B,QAAQuI,OAAO,SAACpF,EAAOpF,GAAR,OAAmBoF,EAAQpF,EAAOkF,OAAO,IAGpEuF,GAAe,SAAClK,EAAoBmK,GACxC,OAAOnK,EAAS0B,QAAQa,IACtB,SAAA9C,GAAM,OAAKA,EAAOoD,MAAQsH,EAAUtH,IAAMsH,EAAY1K,KAIpD2K,GAAmC,WAAkC,IAAjC/G,EAAiCgH,UAAA1I,OAAA,QAAAmI,IAAAO,UAAA,GAAAA,UAAA,GAAzBT,GAAclK,EAAW2K,UAAA1I,OAAA,EAAA0I,UAAA,QAAAP,EACzE,OAAQpK,EAAO4K,MACb,KAAK/K,EAAqBU,yBACxB,IAAMD,EAAWN,EAAOgJ,QACxB,OAAO6B,OAAAC,GAAA,EAAAD,CAAA,GACFlH,EADL,CAEEQ,eAAe0G,OAAAC,GAAA,EAAAD,CAAA,CACb1F,MAAOmF,GAAchK,GACrB8D,oBAAgBgG,GACb9J,KAGT,KAAKT,EAAqBI,8BACxB,IAAMF,EAASC,EAAOgJ,QACtB,OAAO6B,OAAAC,GAAA,EAAAD,CAAA,GACFlH,EADL,CAEEQ,eAAe0G,OAAAC,GAAA,EAAAD,CAAA,GACVlH,EAAMQ,eADG,CAEZgB,MAAOmF,GAAwB3G,EAAMQ,gBACrCnC,QAASwI,GAAuB7G,EAAMQ,eAAgBpE,GACtDqE,oBAAgBgG,MAGtB,KAAKvK,EAAqBoH,yBACxB,OAAO4D,OAAAC,GAAA,EAAAD,CAAA,GACFlH,EADL,CAEEQ,eAAe0G,OAAAC,GAAA,EAAAD,CAAA,GACVlH,EAAMQ,eADG,CAEZC,eAAgBpE,EAAOgJ,YAG7B,KAAKnJ,EAAqBe,0BACxB,OAAOiK,OAAAC,GAAA,EAAAD,CAAA,GAAKlH,EAAZ,CAAmBC,MAAO5D,EAAOgJ,UACnC,KAAKnJ,EAAqBwC,qBACxB,OAAOwI,OAAAC,GAAA,EAAAD,CAAA,GACFlH,EADL,CAEEQ,oBAAgBiG,IAEpB,KAAKvK,EAAqBiH,yBAC1B,KAAKjH,EAAqBgE,0BAC1B,QACE,OAAOF,gBChCIoH,IAAV,SAAUA,KAAV,OAAArC,EAAAtB,EAAAuB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACL,OADKF,EAAAE,KAAA,EACCiB,YAAI,CAACiB,YAAKC,MADX,wBAAArC,EAAAS,SAAA6B,GAAA9J,iBAR2B+J,GCV5BC,GAAmBC,8BAAoB,IACvCC,GAAiBC,cACjBJ,GAAUK,YAAqB,CAAEC,SAAU,8BAE3CvB,GAAewB,OAAOC,kBACtBC,GAAQC,uBDKoBV,GCJdA,GDImCW,0BAAkC,CACvFC,OAAQC,YAAcb,IACtBxK,UAAWsL,MCLX/B,GACAkB,GAAiBc,0BAAgBC,YAAiBhB,IAAUG,MAG9DA,GAAec,IAAIrB,IAEnBsB,IAASC,OACPnF,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAUX,MAAOA,IACfzE,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAiBrB,QAASA,IACxBhE,EAAAC,EAAAC,cAACoF,EAAD,QAGJC,SAASC,eAAe","file":"static/js/main.c7797838.chunk.js","sourcesContent":["import { Choice } from \"../choice/types\";\n\nexport interface Question {\n  id: number,\n  question: string,\n  published_at: Date,\n  url: string,\n  choices: Choice[]\n  selectedChoice?: Choice\n  total: number\n}\n\nexport enum QuestionsActionTypes {\n  QUESTION_SHOW_DETAIL = '@@questions/QUESTION_SHOW_DETAIL',\n  QUESTION_CHOICE_SELECTED = '@@questions/QUESTION_CHOICE_SELECTED',\n  QUESTION_CHOICE_VOTE_REQUESTED = '@@questions/QUESTION_CHOICE_VOTE_REQUESTED',\n  QUESTION_CHOICE_VOTE_SUCEEDED = '@@questions/QUESTION_CHOICE_VOTE_SUCEEDED',\n  QUESTION_CHOICE_VOTE_FAILED = '@@questions/QUESTION_CHOICE_VOTE_FAILED',\n  QUESTION_FETCH_REQUESTED = '@@questions/QUESTION_FETCH_REQUESTED',\n  QUESTION_FETCH_SUCCEEDED = '@@questions/QUESTION_FETCH_SUCCEEDED',\n  QUESTION_FETCH_FAILED = '@@questions/QUESTION_FETCH_FAILED',\n  QUESTIONS_FETCH_REQUESTED = '@@questions/QUESTIONS_FETCH_REQUESTED',\n  QUESTIONS_FETCH_SUCCEEDED = '@@questions/QUESTIONS_FETCH_SUCCEEDED',\n  QUESTIONS_FETCH_FAILED = '@@questions/QUESTIONS_FETCH_FAILED',\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface QuestionsState {\n  readonly loading: boolean\n  readonly activeQuestion?: Question\n  readonly items: Question[]\n  readonly errors?: string\n}","import { action } from 'typesafe-actions'\nimport { QuestionsActionTypes, Question } from \"./types\";\nimport { Choice } from \"../choice/types\";\n\nexport const showDetail = (question: Question) => action(QuestionsActionTypes.QUESTION_SHOW_DETAIL, question);\n\nexport const choiceSelected = (choice: Choice) => action(QuestionsActionTypes.QUESTION_CHOICE_SELECTED, choice);\nexport const choiceVoteRequested = (choice: Choice) => action(QuestionsActionTypes.QUESTION_CHOICE_VOTE_REQUESTED, choice);\nexport const choiceVoteSucceeded = (choice: Choice) => action(QuestionsActionTypes.QUESTION_CHOICE_VOTE_SUCEEDED, choice);\nexport const choiceVoteFailed = (message: string) => action(QuestionsActionTypes.QUESTION_CHOICE_VOTE_FAILED, message);\n\nexport const fetchQuestionRequested = (id: number) => action(QuestionsActionTypes.QUESTION_FETCH_REQUESTED, { id });\nexport const fetchQuestionSucceeded = (question: Question) => action(QuestionsActionTypes.QUESTION_FETCH_SUCCEEDED, question);\nexport const fetchQuestionFailed = (message: string) => action(QuestionsActionTypes.QUESTION_FETCH_FAILED, message);\n\nexport const fetchQuestionsRequested = () => action(QuestionsActionTypes.QUESTIONS_FETCH_REQUESTED);\nexport const fetchQuestionsSucceeded = (questions: Question[]) => action(QuestionsActionTypes.QUESTIONS_FETCH_SUCCEEDED, questions);\nexport const fetchQuestionsFailed = (message: string) => action(QuestionsActionTypes.QUESTIONS_FETCH_FAILED, message);","import * as React from 'react'\nimport { Card } from \"semantic-ui-react\";\nimport { Question } from \"../../../store/question/types\";\n\ninterface Props {\n  question: Question\n  showDetail: any\n}\n\nclass QuestionCard extends React.Component<Props> {\n  handleClick = () => {\n    this.props.showDetail(this.props.question);\n  };\n\n  render() {\n    const { question } = this.props;\n    return (\n      <Card fluid onClick={this.handleClick}>\n        <Card.Content>\n          <Card.Header>{question.question}</Card.Header>\n          <Card.Meta>\n            {new Date(question.published_at).toLocaleString()}\n          </Card.Meta>\n          <Card.Description>{question.choices.length} choices</Card.Description>\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n\nexport default QuestionCard;\n","import { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { showDetail } from \"../../../store/question/actions\";\nimport template from \"./template\";\nimport { Question } from \"../../../store/question/types\";\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    showDetail: (question: Question) => dispatch(showDetail(question))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(template);\n","import * as React from 'react'\nimport { Grid, Container, Header, Loader } from \"semantic-ui-react\";\nimport QuestionCard from \"../QuestionCard\";\nimport { Question } from \"../../../store/question/types\";\n\ninterface Props {\n  getQuestions: any\n  questions: Question[]\n}\n\nclass QuestionList extends React.Component<Props> {\n  componentDidMount() {\n    this.props.getQuestions();\n  }\n\n  render() {\n    const { questions } = this.props;\n    return (\n      <React.Fragment>\n        <Container>\n          <Header as=\"h1\">Questions</Header>\n          <Grid stackable>\n            {questions.length ? (\n              questions.map(question => (\n                <Grid.Column\n                  computer={4}\n                  tablet={8}\n                  mobile={16}\n                  key={question.url}\n                >\n                  <QuestionCard question={question} />\n                </Grid.Column>\n              ))\n            ) : (\n              <Loader\n                active\n                size=\"large\"\n                inline=\"centered\"\n                style={{ marginTop: \"250px\" }}\n              >\n                Loading...\n              </Loader>\n            )}\n          </Grid>\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default QuestionList;\n","import { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { fetchQuestionsRequested } from \"../../../store/question/actions\";\nimport template from \"./template\";\nimport { ApplicationState } from \"../../../store\"\n\nconst mapStateToProps = (state: ApplicationState) => {\n  return {\n    questions: state.questions.items || []\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    getQuestions: () => {\n      dispatch(fetchQuestionsRequested());\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(template);\n","import * as React from 'react'\nimport { Choice } from \"../../../store/choice/types\";\nimport { Question } from \"../../../store/question/types\";\nimport { RouteComponentProps } from 'react-router'\nimport {\n  Button,\n  Divider,\n  Container,\n  Header,\n  Icon,\n  Progress,\n  Radio,\n  Loader,\n  Table\n} from \"semantic-ui-react\";\n\ninterface Props {\n  activeQuestion?: Question\n  choiceVote: any\n  getQuestion: any\n  selectChoice: any\n}\n\ninterface RouteProps {\n  id: string\n} \n\nclass QuestionDetail extends React.Component<Props & RouteComponentProps<RouteProps>> {\n\n  componentDidMount() {\n    this.props.getQuestion(this.props.match.params.id);\n  }\n\n  handleChoiceClick = (choice: Choice) => {\n    this.props.selectChoice(choice);\n  };\n\n  handleVoteSubmit = () => {\n    this.props.choiceVote(this.props.activeQuestion!.selectedChoice);\n  };\n\n  renderChoice = (choice: Choice) => {\n    const { activeQuestion } = this.props;\n    const { selectedChoice } = activeQuestion!;\n    const selected = selectedChoice && choice.url === selectedChoice.url;\n    console.log('[dev:hugo] selectedChoice', selectedChoice);\n    return (\n      <Table.Row\n        key={choice.url}\n        onClick={() => this.handleChoiceClick(choice)}\n        positive={selected}\n      >\n        <Table.Cell collapsing textAlign=\"center\">\n          <Radio checked={selected} />\n        </Table.Cell>\n        <Table.Cell>{choice.choice}</Table.Cell>\n        <Table.Cell>{choice.votes} votes</Table.Cell>\n        <Table.Cell>\n          <Progress\n            total={activeQuestion!.total}\n            value={choice.votes}\n            precision={0}\n            indicating\n          />\n        </Table.Cell>\n      </Table.Row>\n    );\n  };\n\n  render() {\n    const { activeQuestion } = this.props;\n    if (activeQuestion) {\n      return (\n        <React.Fragment>\n          <Container>\n            <Header as=\"h1\">Questions detail</Header>\n            <Header as=\"h2\">Question: {activeQuestion.question}</Header>\n            <Divider hidden />\n            <Table celled definition selectable>\n              <Table.Body>\n                {activeQuestion.choices.map(choice =>\n                  this.renderChoice(choice)\n                )}\n              </Table.Body>\n\n              <Table.Footer fullWidth>\n                <Table.Row>\n                  <Table.HeaderCell />\n                  <Table.HeaderCell colSpan=\"4\">\n                    <Button\n                      floated=\"right\"\n                      labelPosition=\"left\"\n                      icon\n                      primary\n                      disabled={!activeQuestion.selectedChoice}\n                      onClick={this.handleVoteSubmit}\n                    >\n                      <Icon name=\"add\" /> Save Vote\n                    </Button>\n                  </Table.HeaderCell>\n                </Table.Row>\n              </Table.Footer>\n            </Table>\n          </Container>\n        </React.Fragment>\n      );\n    }\n    return (\n      <Loader\n        active\n        size=\"large\"\n        inline=\"centered\"\n        style={{ marginTop: \"250px\" }}\n      >\n        Loading...\n      </Loader>\n    );\n  }\n}\n\nexport default QuestionDetail;\n","import { connect } from \"react-redux\";\nimport * as actions from \"../../../store/question/actions\";\nimport template from \"./template\";\nimport { ApplicationState } from \"../../../store\"\nimport { Dispatch } from 'redux';\nimport { Choice } from \"../../../store/choice/types\";\n\nconst mapStateToProps = (state: ApplicationState) => {\n  return {\n    activeQuestion: state.questions.activeQuestion\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    getQuestion: (id: number) => {\n      dispatch(actions.fetchQuestionRequested(id));\n    },\n    choiceVote: (choice: Choice) => {\n      dispatch(actions.choiceVoteRequested(choice));\n    },\n    selectChoice: (choice: Choice) => {\n      console.log('[dev:hugo] choice', choice);\n      dispatch(actions.choiceSelected(choice));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(template);\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport QuestionList from \"./components/Question/QuestionList\";\nimport QuestionDetail from \"./components/Question/QuestionDetail\";\n\nexport default class Routes extends Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={QuestionList} />\n          <Route path=\"/questions/:id\" component={QuestionDetail} />\n        </Switch>\n      </div>\n    );\n  }\n}\n","import template from \"./template\";\n\nexport default template;\n","import React, { Component } from \"react\";\nimport Routes from \"../../routes\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Routes />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import axios from \"axios\";\n\nconst url = \"https://polls.apiblueprint.org\";\n\nconst api = {\n  getQuestion: function(id: number) {\n    return axios.get(`${url}/questions/${id}`);\n  },\n  getQuestions: function() {\n    return axios.get(`${url}/questions`);\n  },\n  postChoice: function(choiceUrl: string) {\n    return axios.post(`${url}${choiceUrl}`);\n  }\n};\n\nexport default api;\n","import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { QuestionsActionTypes } from \"./types\"\nimport * as actions from \"./actions\";\nimport api from \"../../service/api\";\nimport { push } from \"connected-react-router\";\n\nexport function* voteQuestion(action: ReturnType<typeof actions.choiceVoteRequested>) {\n  try {\n    const res = yield call(api.postChoice, action.payload.url);\n    yield put(actions.choiceVoteSucceeded(res.data));\n  } catch (err) {\n    yield put(actions.choiceVoteFailed(err));\n  }\n}\n\nexport function* fetchQuestion(action: ReturnType<typeof actions.fetchQuestionRequested>) {\n  try {\n    const res = yield call(api.getQuestion, action.payload.id);\n    yield put(actions.fetchQuestionSucceeded(res.data));\n  } catch (err) {\n    yield put(actions.fetchQuestionFailed(err));\n  }\n}\n\nexport function* fetchQuestions() {\n  try {\n    const res = yield call(api.getQuestions);\n    yield put(actions.fetchQuestionsSucceeded(res.data));\n  } catch (err) {\n    yield put(actions.fetchQuestionsFailed(err));\n  }\n}\n\nexport function* showDetail(action: ReturnType<typeof actions.showDetail>) {\n  yield put(push(action.payload.url));\n}\n\nfunction* sagas() {\n  yield all([\n    takeLatest(QuestionsActionTypes.QUESTION_SHOW_DETAIL, showDetail),\n    takeLatest(QuestionsActionTypes.QUESTION_CHOICE_VOTE_REQUESTED, voteQuestion),\n    takeLatest(QuestionsActionTypes.QUESTION_FETCH_REQUESTED, fetchQuestion),\n    takeLatest(QuestionsActionTypes.QUESTIONS_FETCH_REQUESTED, fetchQuestions)\n  ]);\n}\n\nexport default sagas;\n","import { Reducer } from 'redux'\nimport { Question, QuestionsActionTypes, QuestionsState } from \"./types\";\nimport { Choice } from \"../choice/types\";\n\nexport const initialState: QuestionsState = {\n  loading: false,\n  activeQuestion: undefined,\n  items: [],\n  errors: undefined\n};\n\nconst getTotalVotes = (question: Question) => {\n  return question.choices.reduce((total, choice) => total + choice.votes, 0);\n};\n\nconst updateChoice = (question: Question, newChoice: Choice) => {\n  return question.choices.map(\n    choice => (choice.url === newChoice.url ? newChoice : choice)\n  );\n};\n\nconst reducer: Reducer<QuestionsState> = (state = initialState, action) => {\n  switch (action.type) {\n    case QuestionsActionTypes.QUESTION_FETCH_SUCCEEDED:\n      const question = action.payload;\n      return {\n        ...state,\n        activeQuestion: {\n          total: getTotalVotes(question),\n          selectedChoice: undefined,\n          ...question\n        }\n      };\n    case QuestionsActionTypes.QUESTION_CHOICE_VOTE_SUCEEDED:\n      const choice = action.payload;\n      return {\n        ...state,\n        activeQuestion: {\n          ...state.activeQuestion,\n          total: getTotalVotes(<Question>state.activeQuestion),\n          choices: updateChoice(<Question>state.activeQuestion, choice),\n          selectedChoice: undefined\n        }\n      };\n    case QuestionsActionTypes.QUESTION_CHOICE_SELECTED:\n      return {\n        ...state,\n        activeQuestion: {\n          ...state.activeQuestion,\n          selectedChoice: action.payload\n        }\n      };\n    case QuestionsActionTypes.QUESTIONS_FETCH_SUCCEEDED:\n      return { ...state, items: action.payload };\n    case QuestionsActionTypes.QUESTION_SHOW_DETAIL:\n      return {\n        ...state,\n        activeQuestion: undefined\n      };\n    case QuestionsActionTypes.QUESTION_FETCH_REQUESTED:\n    case QuestionsActionTypes.QUESTIONS_FETCH_REQUESTED:\n    default:\n      return state;\n  }\n};\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as questionsReducer }\n","import { combineReducers, Dispatch, Action, AnyAction } from 'redux'\nimport { all, fork } from 'redux-saga/effects'\nimport { connectRouter, RouterState } from 'connected-react-router'\nimport { History } from 'history'\nimport questionsSaga from './question/sagas'\nimport { questionsReducer } from './question/reducers'\nimport { QuestionsState } from './question/types'\n\n// The top-level state object\nexport interface ApplicationState {\n  router: RouterState\n  questions: QuestionsState\n}\n\n// Additional props for connected React components. This prop is passed by default with `connect()`\nexport interface ConnectedReduxProps<A extends Action = AnyAction> {\n  dispatch: Dispatch<A>\n}\n\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = (history: History) => combineReducers<ApplicationState>({\n  router: connectRouter(history),\n  questions: questionsReducer,\n})\n\n// Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\nexport function* rootSaga() {\n  yield all([fork(questionsSaga)])\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { createBrowserHistory } from \"history\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { ConnectedRouter, routerMiddleware } from \"connected-react-router\";\nimport App from \"./components/App\";\nimport { createRootReducer, rootSaga } from './store';\nimport \"./index.css\";\n\nconst composeEnhancers = composeWithDevTools({});\nconst sagaMiddleware = createSagaMiddleware();\nconst history = createBrowserHistory({ basename: '/react-redux-saga-starter' });\n\nconst initialState = window.initialReduxState\nconst store = createStore(\n  createRootReducer(history),\n  initialState,\n  composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}